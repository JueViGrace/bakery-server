// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package database

import (
	"context"
)

const createSession = `-- name: CreateSession :exec
;

insert into bakery_session(
    id,
    refresh_token,
    access_token,
    username,
    user_id
)
values (?, ?, ?, ?, ?)
`

type CreateSessionParams struct {
	ID           string
	RefreshToken string
	AccessToken  string
	Username     string
	UserID       string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.ID,
		arg.RefreshToken,
		arg.AccessToken,
		arg.Username,
		arg.UserID,
	)
	return err
}

const deleteSessionById = `-- name: DeleteSessionById :exec
delete from bakery_session
where id = ?
`

func (q *Queries) DeleteSessionById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionById, id)
	return err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
;

delete from bakery_session
where refresh_token = ? or access_token = ?
`

type DeleteSessionByTokenParams struct {
	RefreshToken string
	AccessToken  string
}

func (q *Queries) DeleteSessionByToken(ctx context.Context, arg DeleteSessionByTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByToken, arg.RefreshToken, arg.AccessToken)
	return err
}

const deleteSessionByUser = `-- name: DeleteSessionByUser :exec
;

delete from bakery_session
where user_id = ?
`

func (q *Queries) DeleteSessionByUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByUser, userID)
	return err
}

const getSessionById = `-- name: GetSessionById :one
select id, refresh_token, access_token, username, user_id
from bakery_session
where id = ?
`

func (q *Queries) GetSessionById(ctx context.Context, id string) (BakerySession, error) {
	row := q.db.QueryRowContext(ctx, getSessionById, id)
	var i BakerySession
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.AccessToken,
		&i.Username,
		&i.UserID,
	)
	return i, err
}

const getSessionByUser = `-- name: GetSessionByUser :many
;

select id, refresh_token, access_token, username, user_id
from bakery_session
where user_id = ?
`

func (q *Queries) GetSessionByUser(ctx context.Context, userID string) ([]BakerySession, error) {
	rows, err := q.db.QueryContext(ctx, getSessionByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BakerySession
	for rows.Next() {
		var i BakerySession
		if err := rows.Scan(
			&i.ID,
			&i.RefreshToken,
			&i.AccessToken,
			&i.Username,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionByUsername = `-- name: GetSessionByUsername :many
;

select id, refresh_token, access_token, username, user_id
from bakery_session
where username = ?
`

func (q *Queries) GetSessionByUsername(ctx context.Context, username string) ([]BakerySession, error) {
	rows, err := q.db.QueryContext(ctx, getSessionByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BakerySession
	for rows.Next() {
		var i BakerySession
		if err := rows.Scan(
			&i.ID,
			&i.RefreshToken,
			&i.AccessToken,
			&i.Username,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :exec
update bakery_session set
    refresh_token = ?,
    access_token = ?,
    username = ?
where id = ?
`

type UpdateSessionParams struct {
	RefreshToken string
	AccessToken  string
	Username     string
	ID           string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession,
		arg.RefreshToken,
		arg.AccessToken,
		arg.Username,
		arg.ID,
	)
	return err
}
