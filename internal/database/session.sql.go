// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package database

import (
	"context"
)

const createToken = `-- name: CreateToken :one
;

insert or replace into bakery_session(
    user_id,
    token
)
values (?, ?)
RETURNING token, user_id
`

type CreateTokenParams struct {
	UserID string
	Token  string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (BakerySession, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.UserID, arg.Token)
	var i BakerySession
	err := row.Scan(&i.Token, &i.UserID)
	return i, err
}

const deleteTokenById = `-- name: DeleteTokenById :exec
delete from bakery_session
where user_id = ?
`

func (q *Queries) DeleteTokenById(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteTokenById, userID)
	return err
}

const deleteTokenByToken = `-- name: DeleteTokenByToken :exec
;

delete from bakery_session
where token = ?
`

func (q *Queries) DeleteTokenByToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteTokenByToken, token)
	return err
}

const getTokenById = `-- name: GetTokenById :one
select token, user_id
from bakery_session
where user_id = ?
`

func (q *Queries) GetTokenById(ctx context.Context, userID string) (BakerySession, error) {
	row := q.db.QueryRowContext(ctx, getTokenById, userID)
	var i BakerySession
	err := row.Scan(&i.Token, &i.UserID)
	return i, err
}

const getTokenByToken = `-- name: GetTokenByToken :one
;

select token, user_id
from bakery_session
where token = ?
`

func (q *Queries) GetTokenByToken(ctx context.Context, token string) (BakerySession, error) {
	row := q.db.QueryRowContext(ctx, getTokenByToken, token)
	var i BakerySession
	err := row.Scan(&i.Token, &i.UserID)
	return i, err
}

const updateToken = `-- name: UpdateToken :one
update bakery_session set
    token = ?
where user_id = ?
RETURNING token, user_id
`

type UpdateTokenParams struct {
	Token  string
	UserID string
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (BakerySession, error) {
	row := q.db.QueryRowContext(ctx, updateToken, arg.Token, arg.UserID)
	var i BakerySession
	err := row.Scan(&i.Token, &i.UserID)
	return i, err
}
