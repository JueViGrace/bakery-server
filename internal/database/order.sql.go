// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package database

import (
	"context"
	"database/sql"
)

const cancelOrder = `-- name: CancelOrder :exec
UPDATE bakery_order SET 
    status = "CANCELLED",
    updated_at = ?
WHERE id = ?
`

type CancelOrderParams struct {
	UpdatedAt string
	ID        string
}

func (q *Queries) CancelOrder(ctx context.Context, arg CancelOrderParams) error {
	_, err := q.db.ExecContext(ctx, cancelOrder, arg.UpdatedAt, arg.ID)
	return err
}

const createOrder = `-- name: CreateOrder :exec
;

INSERT INTO bakery_order (
    id,
    total_amount,
    payment_method,
    status,
    user_id,
    created_at,
    updated_at
)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateOrderParams struct {
	ID            string
	TotalAmount   float64
	PaymentMethod string
	Status        string
	UserID        string
	CreatedAt     string
	UpdatedAt     string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.TotalAmount,
		arg.PaymentMethod,
		arg.Status,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createOrderProducts = `-- name: CreateOrderProducts :exec
INSERT INTO bakery_order_products(
    order_id,
    product_id,
    product_name,
    product_price,
    product_discount,
    product_rating,
    total_price,
    quantity
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateOrderProductsParams struct {
	OrderID         string
	ProductID       string
	ProductName     string
	ProductPrice    float64
	ProductDiscount float64
	ProductRating   float64
	TotalPrice      float64
	Quantity        int64
}

func (q *Queries) CreateOrderProducts(ctx context.Context, arg CreateOrderProductsParams) error {
	_, err := q.db.ExecContext(ctx, createOrderProducts,
		arg.OrderID,
		arg.ProductID,
		arg.ProductName,
		arg.ProductPrice,
		arg.ProductDiscount,
		arg.ProductRating,
		arg.TotalPrice,
		arg.Quantity,
	)
	return err
}

const getOrderById = `-- name: GetOrderById :one
;

select bakery_order.id, total_amount, payment_method, status, user_id, bakery_order.created_at, bakery_order.updated_at, order_id, product_id, product_name, product_price, product_discount, product_rating, total_price, quantity, bakery_product.id, name, description, category, price, stock, issued, has_stock, discount, rating, images, bakery_product.created_at, bakery_product.updated_at, deleted_at
from bakery_order
left join bakery_order_products on bakery_order.id = bakery_order_products.id
left join bakery_product on bakery_order_products.product_id = bakery_product.id
where bakery_order.id = ? and bakery_order.deleted_at is null
`

type GetOrderByIdRow struct {
	ID              string
	TotalAmount     float64
	PaymentMethod   string
	Status          string
	UserID          string
	CreatedAt       string
	UpdatedAt       string
	OrderID         sql.NullString
	ProductID       sql.NullString
	ProductName     sql.NullString
	ProductPrice    sql.NullFloat64
	ProductDiscount sql.NullFloat64
	ProductRating   sql.NullFloat64
	TotalPrice      sql.NullFloat64
	Quantity        sql.NullInt64
	ID_2            sql.NullString
	Name            sql.NullString
	Description     sql.NullString
	Category        sql.NullString
	Price           sql.NullFloat64
	Stock           sql.NullInt64
	Issued          sql.NullInt64
	HasStock        sql.NullInt64
	Discount        sql.NullFloat64
	Rating          sql.NullFloat64
	Images          sql.NullString
	CreatedAt_2     sql.NullString
	UpdatedAt_2     sql.NullString
	DeletedAt       sql.NullString
}

func (q *Queries) GetOrderById(ctx context.Context, id string) (GetOrderByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i GetOrderByIdRow
	err := row.Scan(
		&i.ID,
		&i.TotalAmount,
		&i.PaymentMethod,
		&i.Status,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrderID,
		&i.ProductID,
		&i.ProductName,
		&i.ProductPrice,
		&i.ProductDiscount,
		&i.ProductRating,
		&i.TotalPrice,
		&i.Quantity,
		&i.ID_2,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Stock,
		&i.Issued,
		&i.HasStock,
		&i.Discount,
		&i.Rating,
		&i.Images,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt,
	)
	return i, err
}

const getOrders = `-- name: GetOrders :many
select bakery_order.id, total_amount, payment_method, status, user_id, bakery_order.created_at, bakery_order.updated_at, order_id, product_id, product_name, product_price, product_discount, product_rating, total_price, quantity, bakery_product.id, name, description, category, price, stock, issued, has_stock, discount, rating, images, bakery_product.created_at, bakery_product.updated_at, deleted_at
from bakery_order
left join bakery_order_products on bakery_order.id = bakery_order_products.id
left join bakery_product on bakery_order_products.product_id = bakery_product.id
where bakery_order.deleted_at is null
`

type GetOrdersRow struct {
	ID              string
	TotalAmount     float64
	PaymentMethod   string
	Status          string
	UserID          string
	CreatedAt       string
	UpdatedAt       string
	OrderID         sql.NullString
	ProductID       sql.NullString
	ProductName     sql.NullString
	ProductPrice    sql.NullFloat64
	ProductDiscount sql.NullFloat64
	ProductRating   sql.NullFloat64
	TotalPrice      sql.NullFloat64
	Quantity        sql.NullInt64
	ID_2            sql.NullString
	Name            sql.NullString
	Description     sql.NullString
	Category        sql.NullString
	Price           sql.NullFloat64
	Stock           sql.NullInt64
	Issued          sql.NullInt64
	HasStock        sql.NullInt64
	Discount        sql.NullFloat64
	Rating          sql.NullFloat64
	Images          sql.NullString
	CreatedAt_2     sql.NullString
	UpdatedAt_2     sql.NullString
	DeletedAt       sql.NullString
}

func (q *Queries) GetOrders(ctx context.Context) ([]GetOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersRow
	for rows.Next() {
		var i GetOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.TotalAmount,
			&i.PaymentMethod,
			&i.Status,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrderID,
			&i.ProductID,
			&i.ProductName,
			&i.ProductPrice,
			&i.ProductDiscount,
			&i.ProductRating,
			&i.TotalPrice,
			&i.Quantity,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Stock,
			&i.Issued,
			&i.HasStock,
			&i.Discount,
			&i.Rating,
			&i.Images,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByUser = `-- name: GetOrdersByUser :many
;

select bakery_order.id, total_amount, payment_method, status, user_id, bakery_order.created_at, bakery_order.updated_at, order_id, product_id, product_name, product_price, product_discount, product_rating, total_price, quantity, bakery_product.id, name, description, category, price, stock, issued, has_stock, discount, rating, images, bakery_product.created_at, bakery_product.updated_at, deleted_at
from bakery_order
left join bakery_order_products on bakery_order.id = bakery_order_products.id
left join bakery_product on bakery_order_products.product_id = bakery_product.id
where bakery_order.user_id = ? and bakery_order.deleted_at is null
`

type GetOrdersByUserRow struct {
	ID              string
	TotalAmount     float64
	PaymentMethod   string
	Status          string
	UserID          string
	CreatedAt       string
	UpdatedAt       string
	OrderID         sql.NullString
	ProductID       sql.NullString
	ProductName     sql.NullString
	ProductPrice    sql.NullFloat64
	ProductDiscount sql.NullFloat64
	ProductRating   sql.NullFloat64
	TotalPrice      sql.NullFloat64
	Quantity        sql.NullInt64
	ID_2            sql.NullString
	Name            sql.NullString
	Description     sql.NullString
	Category        sql.NullString
	Price           sql.NullFloat64
	Stock           sql.NullInt64
	Issued          sql.NullInt64
	HasStock        sql.NullInt64
	Discount        sql.NullFloat64
	Rating          sql.NullFloat64
	Images          sql.NullString
	CreatedAt_2     sql.NullString
	UpdatedAt_2     sql.NullString
	DeletedAt       sql.NullString
}

func (q *Queries) GetOrdersByUser(ctx context.Context, userID string) ([]GetOrdersByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersByUserRow
	for rows.Next() {
		var i GetOrdersByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.TotalAmount,
			&i.PaymentMethod,
			&i.Status,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrderID,
			&i.ProductID,
			&i.ProductName,
			&i.ProductPrice,
			&i.ProductDiscount,
			&i.ProductRating,
			&i.TotalPrice,
			&i.Quantity,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Stock,
			&i.Issued,
			&i.HasStock,
			&i.Discount,
			&i.Rating,
			&i.Images,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE bakery_order SET 
    status = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateOrderStatusParams struct {
	Status    string
	UpdatedAt string
	ID        string
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.UpdatedAt, arg.ID)
	return err
}
