// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
;

INSERT INTO bakery_user (
    id,
    first_name,
    last_name,
    username,
    email,
    password,
    phone_number,
    birth_date,
    address1,
    address2,
    gender,
    created_at,
    updated_at
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, first_name, last_name, username, email, password, phone_number, birth_date, address1, address2, gender, role, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	ID          string
	FirstName   string
	LastName    string
	Username    string
	Email       string
	Password    string
	PhoneNumber string
	BirthDate   string
	Address1    string
	Address2    string
	Gender      string
	CreatedAt   string
	UpdatedAt   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (BakeryUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.BirthDate,
		arg.Address1,
		arg.Address2,
		arg.Gender,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i BakeryUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.BirthDate,
		&i.Address1,
		&i.Address2,
		&i.Gender,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE bakery_user SET 
    deleted_at = ?
WHERE id = ?
`

type DeleteUserParams struct {
	DeletedAt sql.NullString
	ID        string
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.DeletedAt, arg.ID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
;

select id, first_name, last_name, username, email, password, phone_number, birth_date, address1, address2, gender, role, created_at, updated_at, deleted_at
from bakery_user
where email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (BakeryUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i BakeryUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.BirthDate,
		&i.Address1,
		&i.Address2,
		&i.Gender,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
;

select id, first_name, last_name, username, email, password, phone_number, birth_date, address1, address2, gender, role, created_at, updated_at, deleted_at
from bakery_user
where id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id string) (BakeryUser, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i BakeryUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.BirthDate,
		&i.Address1,
		&i.Address2,
		&i.Gender,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, first_name, last_name, username, email, password, phone_number, birth_date, address1, address2, gender, role, created_at, updated_at, deleted_at
from bakery_user
`

func (q *Queries) GetUsers(ctx context.Context) ([]BakeryUser, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BakeryUser
	for rows.Next() {
		var i BakeryUser
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.PhoneNumber,
			&i.BirthDate,
			&i.Address1,
			&i.Address2,
			&i.Gender,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE bakery_user SET
    email = ?,
    updated_at = ?
WHERE id = ?
RETURNING id, first_name, last_name, username, email, password, phone_number, birth_date, address1, address2, gender, role, created_at, updated_at, deleted_at
`

type UpdateEmailParams struct {
	Email     string
	UpdatedAt string
	ID        string
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (BakeryUser, error) {
	row := q.db.QueryRowContext(ctx, updateEmail, arg.Email, arg.UpdatedAt, arg.ID)
	var i BakeryUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.BirthDate,
		&i.Address1,
		&i.Address2,
		&i.Gender,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE bakery_user SET
    first_name = ?,
    last_name = ?,
    phone_number = ?,
    birth_date = ?,
    address1 = ?,
    address2 = ?,
    gender = ?,
    updated_at = ?
WHERE id = ?
RETURNING id, first_name, last_name, username, email, password, phone_number, birth_date, address1, address2, gender, role, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	FirstName   string
	LastName    string
	PhoneNumber string
	BirthDate   string
	Address1    string
	Address2    string
	Gender      string
	UpdatedAt   string
	ID          string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (BakeryUser, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.BirthDate,
		arg.Address1,
		arg.Address2,
		arg.Gender,
		arg.UpdatedAt,
		arg.ID,
	)
	var i BakeryUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.BirthDate,
		&i.Address1,
		&i.Address2,
		&i.Gender,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUsername = `-- name: UpdateUsername :one
UPDATE bakery_user SET
    username = ?,
    updated_at = ?
WHERE id = ?
RETURNING id, first_name, last_name, username, email, password, phone_number, birth_date, address1, address2, gender, role, created_at, updated_at, deleted_at
`

type UpdateUsernameParams struct {
	Username  string
	UpdatedAt string
	ID        string
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (BakeryUser, error) {
	row := q.db.QueryRowContext(ctx, updateUsername, arg.Username, arg.UpdatedAt, arg.ID)
	var i BakeryUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.BirthDate,
		&i.Address1,
		&i.Address2,
		&i.Gender,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
